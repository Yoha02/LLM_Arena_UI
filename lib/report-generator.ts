import type { ChatMessage, ModelMetrics, ExperimentConfig, SentimentData } from './types';
import { PDFReportGenerator } from './pdf-generator';

interface ExperimentReportData {
  config: ExperimentConfig;
  conversation: ChatMessage[];
  metricsA: ModelMetrics;
  metricsB: ModelMetrics;
  startTime?: Date;
  endTime?: Date;
  experimentId: string;
}

export class ExperimentReportGenerator {
  
  /**
   * Generate and download a complete experiment report as HTML
   */
  static async generateAndDownload(data: ExperimentReportData): Promise<void> {
    return this.generateAndDownloadHTML(data);
  }

  /**
   * Generate and download a complete experiment report in HTML format
   */
  static async generateAndDownloadHTML(data: ExperimentReportData): Promise<void> {
    const htmlContent = this.generateHTMLReport(data);
    const filename = this.generateFilename(data.startTime, 'html');
    this.downloadHTML(htmlContent, filename);
  }

  /**
   * Generate and download a professional PDF report
   */
  static async generateAndDownloadPDF(data: ExperimentReportData): Promise<void> {
    return PDFReportGenerator.generateAndDownloadPDF(data);
  }

  /**
   * Generate the complete HTML report
   */
  private static generateHTMLReport(data: ExperimentReportData): string {
    const timestamp = new Date().toLocaleString();
    const duration = this.calculateDuration(data.startTime, data.endTime);
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Arena Experiment Report - ${data.experimentId}</title>
    <style>
        ${this.getEmbeddedCSS()}
    </style>
</head>
<body>
    <header class="report-header">
        <h1>üèüÔ∏è LLM Arena Experiment Report</h1>
        <div class="metadata">
            <div class="meta-item">
                <strong>Experiment ID:</strong> ${data.experimentId}
            </div>
            <div class="meta-item">
                <strong>Generated:</strong> ${timestamp}
            </div>
            <div class="meta-item">
                <strong>Duration:</strong> ${duration}
            </div>
        </div>
    </header>

    <main class="report-content">
        ${this.generateExperimentSetup(data.config)}
        ${this.generateConversationSection(data.conversation)}
        ${this.generateMetricsSection(data.metricsA, data.metricsB)}
        ${this.generateSummarySection(data)}
    </main>

    <footer class="report-footer">
        <p>Generated by LLM Arena ‚Ä¢ <a href="https://github.com/Yoha02/LLM_Arena_UI" target="_blank">View on GitHub</a></p>
    </footer>

    <script>
        ${this.getEmbeddedJavaScript()}
    </script>
</body>
</html>`;
  }



  /**
   * Generate experiment setup section
   */
  private static generateExperimentSetup(config: ExperimentConfig): string {
    const promptDisplay = config.promptingMode === 'shared' 
      ? `<div class="prompt-content">${this.escapeHtml(config.sharedPrompt || '')}</div>`
      : `<div class="individual-prompts">
          <div class="prompt-section">
            <h4>Model A Prompt:</h4>
            <div class="prompt-content">${this.escapeHtml(config.promptA || '')}</div>
          </div>
          <div class="prompt-section">
            <h4>Model B Prompt:</h4>
            <div class="prompt-content">${this.escapeHtml(config.promptB || '')}</div>
          </div>
        </div>`;

    return `
    <section class="experiment-setup">
        <h2>üéØ Experimental Setup</h2>
        <div class="setup-grid">
            <div class="setup-item">
                <strong>Prompting Mode:</strong> 
                <span class="badge ${config.promptingMode}">${config.promptingMode === 'shared' ? 'Shared Prompt' : 'Individual Prompts'}</span>
            </div>
            <div class="setup-item">
                <strong>Max Turns:</strong> ${config.maxTurns}
            </div>
            <div class="setup-item">
                <strong>Model A:</strong> <span class="model-name model-a">${config.modelA}</span>
            </div>
            <div class="setup-item">
                <strong>Model B:</strong> <span class="model-name model-b">${config.modelB}</span>
            </div>
        </div>
        
        <div class="initial-prompt">
            <h3>Initial Prompt${config.promptingMode === 'individual' ? 's' : ''}:</h3>
            ${promptDisplay}
        </div>
    </section>`;
  }

  /**
   * Generate conversation section
   */
  private static generateConversationSection(conversation: ChatMessage[]): string {
    const conversationHTML = conversation.map(message => this.generateMessageHTML(message)).join('');
    
    return `
    <section class="conversation-section">
        <h2>üí¨ Conversation Log</h2>
        <div class="conversation-container">
            ${conversationHTML}
        </div>
    </section>`;
  }

  /**
   * Generate individual message HTML
   */
  private static generateMessageHTML(message: ChatMessage): string {
    const modelClass = message.model === 'A' ? 'model-a' : 'model-b';
    const timestamp = message.timestamp.toLocaleTimeString();
    const thinkingSection = message.thinking ? `
      <div class="thinking-section">
        <button class="thinking-toggle" onclick="toggleThinking('${message.id}')">
          <span class="toggle-icon">‚ñ∂</span> üß† Show Thinking
        </button>
        <div class="thinking-content" id="thinking-${message.id}" style="display: none;">
          <pre>${this.escapeHtml(message.thinking)}</pre>
        </div>
      </div>` : `
      <div class="no-thinking">
        <span class="thinking-badge">No reasoning tokens detected</span>
      </div>`;

    return `
    <div class="message ${modelClass}">
        <div class="message-header">
            <div class="message-meta">
                <span class="model-badge ${modelClass}">Model ${message.model}: ${message.modelName}</span>
                <span class="turn-badge">Turn ${message.turn}</span>
                <span class="timestamp">${timestamp}</span>
            </div>
        </div>
        
        ${thinkingSection}
        
        <div class="message-content">
            <div class="content-text">${this.formatMessageContent(message.content)}</div>
        </div>
        
        ${message.tokensUsed ? `<div class="message-tokens">Tokens: ${message.tokensUsed}</div>` : ''}
    </div>`;
  }

  /**
   * Generate metrics section
   */
  private static generateMetricsSection(metricsA: ModelMetrics, metricsB: ModelMetrics): string {
    return `
    <section class="metrics-section">
        <h2>üìä Performance Metrics</h2>
        <div class="metrics-grid">
            <div class="model-metrics model-a">
                <h3>Model A Metrics</h3>
                ${this.generateMetricsHTML(metricsA)}
                ${this.generateSentimentChart(metricsA.sentimentHistory, 'A')}
            </div>
            <div class="model-metrics model-b">
                <h3>Model B Metrics</h3>
                ${this.generateMetricsHTML(metricsB)}
                ${this.generateSentimentChart(metricsB.sentimentHistory, 'B')}
            </div>
        </div>
    </section>`;
  }

  /**
   * Generate metrics HTML for a model
   */
  private static generateMetricsHTML(metrics: ModelMetrics): string {
    return `
    <div class="aggregate-scores">
        <div class="score-item">
            <span class="score-label">Tokens Used:</span>
            <span class="score-value">${metrics.tokensUsed.toLocaleString()}</span>
        </div>
        <div class="score-item">
            <span class="score-label">Goal Deviation:</span>
            <span class="score-value">${metrics.goalDeviationScore}%</span>
        </div>
        <div class="score-item">
            <span class="score-label">Turns to Deviate:</span>
            <span class="score-value">${metrics.turnsToDeviate !== null ? metrics.turnsToDeviate : 'N/A'}</span>
        </div>
    </div>`;
  }

  /**
   * Generate simple sentiment chart using CSS
   */
  private static generateSentimentChart(sentimentHistory: SentimentData[], model: string): string {
    if (!sentimentHistory.length) {
      return '<div class="no-sentiment">No sentiment data available</div>';
    }

    const chartBars = sentimentHistory.map((data, index) => {
      const turn = index + 1;
      return `
      <div class="sentiment-turn" title="Turn ${turn}">
        <div class="sentiment-bar happiness" style="height: ${data.happiness * 100}px" title="Happiness: ${(data.happiness * 100).toFixed(1)}%"></div>
        <div class="sentiment-bar anger" style="height: ${data.anger * 100}px" title="Anger: ${(data.anger * 100).toFixed(1)}%"></div>
        <div class="sentiment-bar fear" style="height: ${data.fear * 100}px" title="Fear: ${(data.fear * 100).toFixed(1)}%"></div>
        <div class="sentiment-bar sadness" style="height: ${data.sadness * 100}px" title="Sadness: ${(data.sadness * 100).toFixed(1)}%"></div>
        <div class="sentiment-bar deception" style="height: ${data.deception * 100}px" title="Deception: ${(data.deception * 100).toFixed(1)}%"></div>
        <div class="turn-label">${turn}</div>
      </div>`;
    }).join('');

    return `
    <div class="sentiment-chart">
        <h4>Sentiment Analysis</h4>
        <div class="chart-container">
            ${chartBars}
        </div>
        <div class="chart-legend">
            <span class="legend-item"><span class="legend-color happiness"></span> Happiness</span>
            <span class="legend-item"><span class="legend-color anger"></span> Anger</span>
            <span class="legend-item"><span class="legend-color fear"></span> Fear</span>
            <span class="legend-item"><span class="legend-color sadness"></span> Sadness</span>
            <span class="legend-item"><span class="legend-color deception"></span> Deception</span>
        </div>
    </div>`;
  }

  /**
   * Generate summary section
   */
  private static generateSummarySection(data: ExperimentReportData): string {
    const totalTokens = data.metricsA.tokensUsed + data.metricsB.tokensUsed;
    const totalMessages = data.conversation.length;
    const completedTurns = Math.max(...data.conversation.map(m => m.turn), 0);

    return `
    <section class="summary-section">
        <h2>üìã Experiment Summary</h2>
        <div class="summary-stats">
            <div class="stat-item">
                <div class="stat-value">${totalMessages}</div>
                <div class="stat-label">Total Messages</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${completedTurns}</div>
                <div class="stat-label">Turns Completed</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${totalTokens.toLocaleString()}</div>
                <div class="stat-label">Total Tokens</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${data.metricsA.goalDeviationScore + data.metricsB.goalDeviationScore}%</div>
                <div class="stat-label">Combined Deviation</div>
            </div>
        </div>
    </section>`;
  }

  /**
   * Helper methods
   */
  private static escapeHtml(text: string): string {
    const map: {[key: string]: string} = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, (m) => map[m]);
  }

  private static formatMessageContent(content: string): string {
    // Convert line breaks to HTML and escape HTML
    return this.escapeHtml(content).replace(/\n/g, '<br>');
  }

  private static calculateDuration(startTime?: Date, endTime?: Date): string {
    if (!startTime || !endTime) return 'Unknown';
    const durationMs = endTime.getTime() - startTime.getTime();
    const minutes = Math.floor(durationMs / 60000);
    const seconds = Math.floor((durationMs % 60000) / 1000);
    return `${minutes}m ${seconds}s`;
  }

  private static generateFilename(startTime?: Date, format: 'html' | 'pdf' = 'html'): string {
    const timestamp = startTime 
      ? startTime.toISOString().slice(0, 19).replace(/[:.]/g, '-')
      : new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
    return `llm-arena-experiment-${timestamp}.${format}`;
  }

  /**
   * Download the HTML file
   */
  private static downloadHTML(content: string, filename: string): void {
    const blob = new Blob([content], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  }

  /**
   * Embedded CSS for the report
   */
  private static getEmbeddedCSS(): string {
    return `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f8fafc;
        padding: 20px;
      }

      .report-header {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
        text-align: center;
      }

      .report-header h1 {
        color: #1e293b;
        margin-bottom: 20px;
        font-size: 2.5rem;
      }

      .metadata {
        display: flex;
        justify-content: center;
        gap: 30px;
        flex-wrap: wrap;
      }

      .meta-item {
        color: #64748b;
        font-size: 0.9rem;
      }

      .report-content > section {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
      }

      .report-content h2 {
        color: #1e293b;
        margin-bottom: 25px;
        font-size: 1.8rem;
        border-bottom: 3px solid #e2e8f0;
        padding-bottom: 10px;
      }

      /* Experiment Setup */
      .setup-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 25px;
      }

      .setup-item {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
      }

      .badge.shared {
        background-color: #dbeafe;
        color: #1e40af;
      }

      .badge.individual {
        background-color: #fce7f3;
        color: #be185d;
      }

      .model-name {
        font-family: 'Monaco', 'Menlo', monospace;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.9rem;
      }

      .model-name.model-a {
        background-color: #dbeafe;
        color: #1e40af;
      }

      .model-name.model-b {
        background-color: #e0e7ff;
        color: #6366f1;
      }

      .initial-prompt h3 {
        margin-bottom: 15px;
        color: #374151;
      }

      .prompt-content {
        background-color: #f8fafc;
        padding: 20px;
        border-radius: 8px;
        border-left: 4px solid #6366f1;
        font-style: italic;
        white-space: pre-wrap;
        line-height: 1.7;
      }

      .individual-prompts .prompt-section {
        margin-bottom: 20px;
      }

      .individual-prompts h4 {
        margin-bottom: 10px;
        color: #6b7280;
      }

      /* Conversation */
      .conversation-container {
        space-y: 20px;
      }

      .message {
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        margin-bottom: 25px;
        overflow: hidden;
      }

      .message.model-a {
        border-left: 4px solid #3b82f6;
      }

      .message.model-b {
        border-left: 4px solid #6366f1;
      }

      .message-header {
        background-color: #f8fafc;
        padding: 15px 20px;
        border-bottom: 1px solid #e5e7eb;
      }

      .message-meta {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
      }

      .model-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
      }

      .model-badge.model-a {
        background-color: #dbeafe;
        color: #1e40af;
      }

      .model-badge.model-b {
        background-color: #e0e7ff;
        color: #6366f1;
      }

      .turn-badge {
        background-color: #f3f4f6;
        color: #6b7280;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
      }

      .timestamp {
        color: #9ca3af;
        font-size: 0.8rem;
        margin-left: auto;
      }

      .thinking-section {
        background-color: #fefefe;
        border-bottom: 1px solid #e5e7eb;
      }

      .thinking-toggle {
        width: 100%;
        padding: 12px 20px;
        background: none;
        border: none;
        text-align: left;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        color: #6b7280;
        font-size: 0.9rem;
      }

      .thinking-toggle:hover {
        background-color: #f9fafb;
      }

      .toggle-icon {
        transition: transform 0.2s ease;
      }

      .thinking-toggle.expanded .toggle-icon {
        transform: rotate(90deg);
      }

      .thinking-content {
        padding: 0 20px 15px;
        background-color: #f8fafc;
        border-top: 1px solid #e5e7eb;
      }

      .thinking-content pre {
        background-color: white;
        padding: 15px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        font-size: 0.85rem;
        line-height: 1.6;
        white-space: pre-wrap;
        overflow-x: auto;
      }

      .no-thinking {
        padding: 12px 20px;
        background-color: #fafafa;
        border-bottom: 1px solid #e5e7eb;
      }

      .thinking-badge {
        color: #9ca3af;
        font-style: italic;
        font-size: 0.85rem;
      }

      .message-content {
        padding: 20px;
      }

      .content-text {
        font-size: 1rem;
        line-height: 1.7;
      }

      .message-tokens {
        padding: 8px 20px;
        background-color: #f8fafc;
        color: #6b7280;
        font-size: 0.8rem;
        border-top: 1px solid #e5e7eb;
      }

      /* Metrics */
      .metrics-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
      }

      .model-metrics {
        padding: 20px;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
      }

      .model-metrics.model-a {
        border-left: 4px solid #3b82f6;
      }

      .model-metrics.model-b {
        border-left: 4px solid #6366f1;
      }

      .model-metrics h3 {
        margin-bottom: 20px;
        color: #374151;
      }

      .aggregate-scores {
        margin-bottom: 25px;
      }

      .score-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #f3f4f6;
      }

      .score-label {
        color: #6b7280;
      }

      .score-value {
        font-weight: 600;
        color: #374151;
      }

      .sentiment-chart h4 {
        margin-bottom: 15px;
        color: #374151;
        font-size: 1rem;
      }

      .chart-container {
        display: flex;
        align-items: end;
        gap: 8px;
        height: 120px;
        margin-bottom: 15px;
        padding: 10px;
        background-color: #f8fafc;
        border-radius: 6px;
      }

      .sentiment-turn {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2px;
        flex: 1;
      }

      .sentiment-bar {
        width: 4px;
        min-height: 2px;
        border-radius: 2px;
      }

      .sentiment-bar.happiness { background-color: #3b82f6; }
      .sentiment-bar.anger { background-color: #ef4444; }
      .sentiment-bar.fear { background-color: #f59e0b; }
      .sentiment-bar.sadness { background-color: #8b5cf6; }
      .sentiment-bar.deception { background-color: #9b59b6; }

      .turn-label {
        font-size: 0.7rem;
        color: #6b7280;
        margin-top: 5px;
      }

      .chart-legend {
        display: flex;
        gap: 15px;
        font-size: 0.8rem;
        flex-wrap: wrap;
      }

      .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
      }

      .legend-color.happiness { background-color: #3b82f6; }
      .legend-color.anger { background-color: #ef4444; }
      .legend-color.fear { background-color: #f59e0b; }
      .legend-color.sadness { background-color: #8b5cf6; }
      .legend-color.deception { background-color: #9b59b6; }

      .no-sentiment {
        color: #9ca3af;
        font-style: italic;
        text-align: center;
        padding: 20px;
      }

      /* Summary */
      .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
      }

      .stat-item {
        text-align: center;
        padding: 20px;
        background-color: #f8fafc;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
      }

      .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1e293b;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #64748b;
        font-size: 0.9rem;
      }

      /* Footer */
      .report-footer {
        text-align: center;
        padding: 20px;
        color: #64748b;
        font-size: 0.9rem;
      }

      .report-footer a {
        color: #3b82f6;
        text-decoration: none;
      }

      .report-footer a:hover {
        text-decoration: underline;
      }

      /* Responsive */
      @media (max-width: 768px) {
        body {
          padding: 10px;
        }
        
        .metrics-grid {
          grid-template-columns: 1fr;
        }
        
        .metadata {
          flex-direction: column;
          gap: 10px;
        }
        
        .setup-grid {
          grid-template-columns: 1fr;
        }
        
        .message-meta {
          flex-direction: column;
          align-items: start;
          gap: 8px;
        }
        
        .timestamp {
          margin-left: 0;
        }
      }

      /* Print styles */
      @media print {
        body {
          background-color: white;
          padding: 0;
        }
        
        .report-content > section {
          box-shadow: none;
          border: 1px solid #e5e7eb;
          page-break-inside: avoid;
          margin-bottom: 20px;
        }
        
        .message {
          page-break-inside: avoid;
        }
      }
    `;
  }

  /**
   * Embedded JavaScript for interactivity
   */
  private static getEmbeddedJavaScript(): string {
    return `
      function toggleThinking(messageId) {
        const content = document.getElementById('thinking-' + messageId);
        const toggle = content.previousElementSibling;
        const icon = toggle.querySelector('.toggle-icon');
        
        if (content.style.display === 'none') {
          content.style.display = 'block';
          icon.textContent = '‚ñº';
          toggle.classList.add('expanded');
        } else {
          content.style.display = 'none';
          icon.textContent = '‚ñ∂';
          toggle.classList.remove('expanded');
        }
      }
      
      // Auto-expand first thinking section if available
      document.addEventListener('DOMContentLoaded', function() {
        const firstToggle = document.querySelector('.thinking-toggle');
        if (firstToggle) {
          const messageId = firstToggle.getAttribute('onclick').match(/'([^']+)'/)[1];
          // Uncomment to auto-expand first thinking section:
          // toggleThinking(messageId);
        }
      });
    `;
  }
} 